#!/usr/bin/env python
import socket
import argparse
from concurrent.futures import ThreadPoolExecutor
from colorama import Fore,Back,init,Style
import socks

print(Fore.BLUE+"""              
 ______ ______ ______    
/\  ___/\__  _/\  ___\   
\ \  __\/_/\ \\ \  __\   
 \ \_____\\ \_\\ \_____\ 
  \/_____/ \/_/ \/_____/ 
                                                                 
"""+Style.RESET_ALL)


print(Fore.RED+"[!]"+Style.RESET_ALL+" Lütfen sadece yetkinizin olduğu sistemleri tarayın."+Style.RESET_ALL)
print(Fore.YELLOW+"[?]"+Style.RESET_ALL+" Nasıl gidiyor dostum iyimisin?"+Style.RESET_ALL)
print(Fore.GREEN+"[©]"+Style.RESET_ALL+" by erdemskywalker"+Style.RESET_ALL)

full_ports=""

for i in range(65000):
    full_ports+=str(i)+","
full_ports+="65000"

# Tor proxy ayarları
tor_ip = "127.0.0.1"  # Tor'un yerel adresi
tor_port = 9050        # Tor'un SOCKS5 proxy portu

def scanner(ip, port,proxy):
    try:
        scan = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        scan.settimeout(2)

        if(proxy=="true"):
            socks.set_default_proxy(socks.SOCKS5, tor_ip, tor_port) 
            socket.socket = socks.socksocket 

        result = scan.connect_ex((ip, port))

        if result == 0:
            print(""+Fore.GREEN+" OPEN      "+Style.RESET_ALL+f"   {port}")
        

    except socket.error as err:
        print(f"Socket error on port {port}: {err}")
    finally:
        scan.close()

def first(ports, target,time,proxy):
    excut = ports.split(",")
    if proxy.lower()=="true":
        print(Fore.RED+"TOR ÇALIŞIYOR......"+Style.RESET_ALL)
    with ThreadPoolExecutor(max_workers=int(time)) as executor:  
        futures = [executor.submit(scanner, target, int(port),proxy.lower()) for port in excut]
        for future in futures:
            future.result()  

def main():
    parser = argparse.ArgumentParser(description="SCANNER...")
    parser.add_argument("-i", "--ip", required=True, help="IP Adresi")
    parser.add_argument("-p", "--ports", help="Portları ',' koyarak giriniz", default=full_ports)
    parser.add_argument("-t", "--time", help="eş zamanlılık", default=1)
    parser.add_argument("-v", "--proxy", help="proxy", default="False")
    args = parser.parse_args()
    first(args.ports, args.ip,args.time,args.proxy)

if __name__ == "__main__":
    main()
